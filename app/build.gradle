apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-parcelize'
apply plugin: 'kotlin-kapt'
apply plugin: 'dagger.hilt.android.plugin'
apply plugin: 'androidx.navigation.safeargs.kotlin'

// Get the MEGA SDK commit hash using Git
def getSdkGitHash = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        workingDir 'src/main/jni/mega/sdk'
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

// Get the MEGAchat (Karere) commit hash using Git
def getKarereGitHash = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        workingDir 'src/main/jni/megachat/sdk'
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

android {
    compileSdkVersion rootProject.compileSdkVersion
    buildToolsVersion rootProject.buildToolsVerion

    buildFeatures {
        dataBinding = true
        viewBinding = true
    }



    defaultConfig {
        applicationId "mega.privacy.android.app"

        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        versionCode rootProject.versionCode
        versionName "$rootProject.appVersion ($rootProject.versionCode)"

        multiDexEnabled true
        ndk.abiFilters 'armeabi-v7a','x86', 'x86_64', 'arm64-v8a'

        buildConfigField ("String", "USER_AGENT", "\"MEGAAndroid/${appVersion}_${versionCode}\"")
        resValue ("string", "app_version", "\"${versionName}\"")
        resValue ("string", "sdk_version", "\"${getSdkGitHash()}\"")
        resValue ("string", "karere_version", "\"${getKarereGitHash()}\"")

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    sourceSets.main {
        java {
            srcDirs += 'src/main/jni/mega/sdk/bindings/java'
            srcDirs += 'src/main/jni/megachat/sdk/bindings/java'
            exclude '**/MegaApiSwing.java'
        }
        jni.srcDirs = [] //disable automatic ndk-build
        jniLibs.srcDir 'src/main/libs' // This is not necessary unless you have precompiled libraries in your project.
    }

    buildTypes {
        debug {
            debuggable true
            //  minifyEnabled false
            //   proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            ext.enableCrashlytics = false
        }
        release {
            //  minifyEnabled false
            //  proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        // abortOnError false
    }

    compileOptions {
        // Flag to enable support for the new language APIs
        coreLibraryDesugaringEnabled true
        // Sets Java compatibility to Java 11
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    kotlinOptions {
        jvmTarget = "11"
    }
//    task megaSDK(type: Exec, description: 'Compile MEGA SDK via NDK') {
//        workingDir 'src/main/jni'
//        commandLine './build.sh', 'all'
//    }
//
//    tasks.withType(JavaCompile) {
//        compileTask -> compileTask.dependsOn megaSDK
//    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }

    flavorDimensions "service"
    productFlavors {
        gms {
            dimension "service"
            apply plugin: 'com.google.firebase.crashlytics'
            firebaseCrashlytics {
                // Enable processing and uploading of native symbols to Crashlytics servers.
                // This flag must be enabled to see properly-symbolicated native
                // stack traces in the Crashlytics dashboard.
                nativeSymbolUploadEnabled true
                unstrippedNativeLibsDir 'src/main/obj/local'
            }

        }
        hms {
            dimension "service"
            applicationId = "mega.privacy.android.app.huawei"
        }
    }
}

dependencies {
    implementation fileTree(dir: "$rootProject.projectDir/app/src/main/jni/ExoPlayer/", include: ['*.aar'])

    // App dependencies
    implementation "androidx.appcompat:appcompat:$appCompatVersion"
    implementation "androidx.cardview:cardview:$cardViewVersion"
    implementation "com.google.android.material:material:$materialVersion"
    implementation "androidx.recyclerview:recyclerview:$recyclerViewVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutinesVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutinesVersion"
    implementation "androidx.legacy:legacy-support-$legacySupportVersion"
    implementation "androidx.constraintlayout:constraintlayout:$constraintLayoutVersion"
    implementation "androidx.viewpager2:viewpager2:$viewPagerVersion"
    implementation "com.google.code.gson:gson:$gsonVersion"

    // Architecture Components
    implementation "androidx.fragment:fragment-ktx:$fragmentKtxVersion"

    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-reactivestreams-ktx:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-process:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-service:$lifecycleVersion"

    implementation "androidx.navigation:navigation-runtime-ktx:$navigationVersion"
    implementation "androidx.navigation:navigation-fragment-ktx:$navigationVersion"
    implementation "androidx.navigation:navigation-ui-ktx:$navigationVersion"

    // Kotlin
    implementation "androidx.core:core-ktx:$ktxVersion"
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"

    // Hilt
    implementation "com.google.dagger:hilt-android:$hiltVersion"
    kapt "com.google.dagger:hilt-android-compiler:$hiltVersion"
    implementation "androidx.hilt:hilt-lifecycle-viewmodel:$hiltAndroidXVersion"
    kapt "androidx.hilt:hilt-compiler:$hiltAndroidXCompilerVersion"

    // Other libs
    implementation 'androidx.exifinterface:exifinterface:1.3.0'
    implementation 'com.github.nirhart:parallaxscroll:1.0'
    implementation 'androidx.palette:palette-ktx:1.0.0'
    implementation 'com.vdurmont:emoji-java:4.0.0'
    implementation "com.google.android.exoplayer:exoplayer-core:$exoPlayerVersion"
    implementation "com.google.android.exoplayer:exoplayer-ui:$exoPlayerVersion"
    implementation 'com.google.zxing:core:3.4.0'
    implementation 'com.budiyev.android:code-scanner:1.8.3'
    implementation 'me.leolin:ShortcutBadger:1.1.22@aar'
    implementation 'com.brandongogetap:stickyheaders:0.6.1'
    implementation 'com.github.ittianyu:BottomNavigationViewEx:2.0.4'
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation 'androidx.emoji:emoji-appcompat:1.1.0'
    implementation 'androidx.preference:preference-ktx:1.1.1'
    implementation 'io.supercharge:shimmerlayout:2.1.0'
    implementation 'net.opacapp:multiline-collapsingtoolbar:27.1.1'
    implementation 'com.github.tony19:named-regexp:0.2.5'
    implementation 'org.hamcrest:hamcrest-library:1.3'
    implementation 'com.google.android:flexbox:2.0.1'
    implementation 'jp.wasabeef:blurry:2.1.0'
    implementation 'com.github.meganz.AndroidDocumentScanner:documentscanner:2.0.8'

    implementation "io.reactivex.rxjava3:rxjava:$rxJavaVersion"
    implementation "io.reactivex.rxjava3:rxandroid:$rxAndroidVersion"
    implementation "io.reactivex.rxjava3:rxkotlin:3.0.1"
    implementation "org.jetbrains.anko:anko-commons:$ankoVersion"

    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.0.10'

    implementation "com.facebook.fresco:fresco:$frescoVersion"
    implementation "com.facebook.fresco:animated-gif:$frescoVersion"
    implementation "com.facebook.fresco:animated-webp:$frescoVersion"
    implementation "com.facebook.fresco:webpsupport:$frescoVersion"

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion"

    implementation "com.github.zhpanvip:BannerViewPager:$bannerViewPagerVersion"

    implementation "org.jetbrains.anko:anko-commons:$ankoVersion"

    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation files('src/main/libs/libwebrtc.jar')

    implementation "com.jeremyliao:live-event-bus-x:$liveEventBus"

    implementation "androidx.biometric:biometric:$biometricVersion"

    //GMS
    gmsImplementation 'com.google.firebase:firebase-core:18.0.0'
    gmsImplementation 'com.google.firebase:firebase-messaging:21.0.1'
    gmsImplementation 'com.android.billingclient:billing:3.0.2'
    gmsImplementation 'com.google.android.gms:play-services-location:17.1.0'
    gmsImplementation 'com.google.android.gms:play-services-maps:17.0.0'
    gmsImplementation 'com.google.maps.android:android-maps-utils:0.5'
    gmsImplementation platform("com.google.firebase:firebase-bom:$firebaseBom")
    gmsImplementation 'com.google.firebase:firebase-crashlytics-ndk'
    gmsImplementation 'com.google.firebase:firebase-analytics-ktx'
    //HMS
    hmsImplementation "com.huawei.agconnect:agconnect-core:$huaweiServicesVersion"
    hmsImplementation 'com.huawei.hms:push:4.0.2.300'
    hmsImplementation 'com.huawei.hms:location:6.2.0.300'
    hmsImplementation 'com.huawei.hms:maps:6.0.1.304'
    hmsImplementation 'com.huawei.hms:iap:4.0.2.300'
    hmsImplementation 'com.huawei.hms:hianalytics:5.2.0.301'
    hmsImplementation 'com.huawei.agconnect:agconnect-crash:1.5.1.300'

    // Play Core
    implementation("com.google.android.play:core:1.10.0")
    implementation("com.google.android.play:core-ktx:1.8.1")

    // Testing dependencies
    testImplementation "junit:junit:$junitVersion"
    testImplementation "com.google.truth:truth:$truthVersion"
    testImplementation "androidx.test.ext:truth:$androidxTestVersion"
    testImplementation "androidx.arch.core:core-testing:$androidxArchCoreVersion"
    testImplementation "androidx.test:core-ktx:$androidxTestVersion"
    testImplementation "androidx.test:core:$androidxTestVersion"
    testImplementation "org.robolectric:robolectric:$roboletricVersion"
    testImplementation "androidx.test.ext:junit-ktx:$androidxTestExtVersion"
    testImplementation "org.mockito:mockito-core:$mockitoVersion"
    testImplementation "org.mockito.kotlin:mockito-kotlin:$mockitoKotlinVersion"

    androidTestImplementation "androidx.test.ext:junit:$androidxTestExtVersion"
    androidTestImplementation "com.google.truth:truth:$truthVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espressoVersion"
}

def taskRequests = gradle.getStartParameter().getTaskRequests().toString()
if (taskRequests.contains("Hms")) {
    apply plugin: 'com.huawei.agconnect'
} else if (taskRequests.contains("Gms")) {
    apply plugin: 'com.google.gms.google-services'
}
